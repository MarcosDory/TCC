# -*- coding: utf-8 -*-
"""Z-score_analisando_variaveis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AMeRGOOdkY3RkGV82AjQNWCOf8ivGmey
"""

# Abrindo arquivos em série

import os
import pandas as pd
import openpyxl as opex
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as stats
import math
import numpy as np
import scipy.stats as stats
from openpyxl import workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Inserir o diretório do drive onde as
# O diretório é padrão para todos os arquivos, assim pode ser uma variável:
path = r'/content/drive/Shareddrives/PUB_Meteorologia/Planilhas_limpas/INMET_horarios_automatica'

# Abrindo o diretório do drive com o pacote "os":
files=os.listdir(path)

# Salvando cada nome de arquivo do diretório, somando o nome com o diretório e uma contrabarra:
# Será salvo em uma lista, cada nome é um elemento:
files_xlsx = [path + "/"+ f for f in files if f[-4:] == 'xlsx']

planilha=pd.read_excel(files_xlsx[0], sheet_name="Plan1")

# Calculando os z-scores:
def z_scores(df):
  z_scores=(df["PREC (mm)"]-np.mean(df["PREC (mm)"]))/np.std(df["PREC (mm)"])
  z_scores2=(df["P ATM (mB)"]-np.mean(df["P ATM (mB)"]))/np.std(df["P ATM (mB)"])
  z_scores3=(df["QG (Kj/m²)"]-np.mean(df["QG (Kj/m²)"]))/np.std(df["QG (Kj/m²)"])
  z_scores4=(df["T ar (°C)"]-np.mean(df["T ar (°C)"]))/np.std(df["T ar (°C)"])
  z_scores5=(df["UR (%)"]-np.mean(df["UR (%)"]))/np.std(df["UR (%)"])
  z_scores6=(df["U2 (m/s)"]-np.mean(df["U2 (m/s)"]))/np.std(df["U2 (m/s)"])

def converter_datas(dados):
  dados['Data Medicao'] = dados['Data Medicao'].apply(pd.to_datetime)
  dados['Ano'] = dados['Data Medicao'].dt.year
  dados['Mês'] = dados['Data Medicao'].dt.month
  dados['Dia'] = dados['Data Medicao'].dt.day
  dados["Hora Medicao"]=dados["Hora Medicao"]/100

def Calculadora_Assimetria(Coluna):
  AS=3*(planilha[Coluna].mean()-planilha[Coluna].median())/(planilha[Coluna].std())
  print("Coeficiente de assimetria para:", Coluna, AS)

Calculadora_Assimetria('PREC (mm)')
Calculadora_Assimetria('P ATM (mB)')
Calculadora_Assimetria('T ar (°C)')
Calculadora_Assimetria('QG (Kj/m²)')
Calculadora_Assimetria('UR (%)')
Calculadora_Assimetria('U2 (m/s)')

# Realizando o cálculo da ETo com o PANDAS:

# Convertendo a coluna de datas:

def conversor_dados(dados):
  dados['Data Medicao'] = dados['Data Medicao'].apply(pd.to_datetime)
  dados['Ano'] = dados['Data Medicao'].dt.year
  dados['Mês'] = dados['Data Medicao'].dt.month
  dados['Dia'] = dados['Data Medicao'].dt.day
  dados["Hora Medicao"]=dados["Hora Medicao"]/100

dados=dados.rename(columns={'Unnamed: 8': 'ETP'})

#Calculando a pressão de saturação do vapor:

def salvando(planilha):
   planilha.to_excel("A010_limpa.xlsx",columns=["Data Medicao","Hora Medicao","PREC (mm)","P ATM (mB)","QG (Kj/m²)","T ar (°C)","UR (%)","U2 (m/s)","ETP"],index=False)

# Definindo horas do dia que são noturnas:

def z_score(Coluna):
  LimSup = planilha[Coluna].mean() + (3*planilha[Coluna].std()) #Limite superior
  LimInf = planilha[Coluna].mean() - (3*planilha[Coluna].std()) #Limite inferior
  # Calcular a quantidade de valores que estão abaixo ou
  # acima do inferior e superior (valores extremos):
  df_aux = planilha[Coluna]
  LS = df_aux > LimSup
  LI = df_aux < LimInf
  # Contar a quantidade de valores extremos:
  sum_LS = df_aux[LS].count()
  sum_LI = df_aux[LI].count()
  # Calcular o percentual:
  per_sum_LS = (sum_LS*100)/len(planilha[Coluna])
  per_sum_LI = (sum_LI*100)/len(planilha[Coluna])
  print("Resumo dos 5 números para", Coluna,":")
  print('LimSup:', round(LimSup,2))
  print('LimInf:', round(LimInf,2))
  print('Quantidade acima de LS:',sum_LS)
  print('Quantidade abaixo de LI:',sum_LI)
  print('LS(%):', round(per_sum_LS,2))
  print('LI(%):', round(per_sum_LI,2))
  print("")

# Insira a variável para ser analisada:

z_score("T AR (°C)")

z_scores=(planilha["PREC (mm)"]-np.mean(planilha["PREC (mm)"]))/np.std(planilha["PREC (mm)"])
z_scores2=(planilha["P ATM (mB)"]-np.mean(planilha["P ATM (mB)"]))/np.std(planilha["P ATM (mB)"])
z_scores3=(planilha["QG (Kj/m²)"]-np.mean(planilha["QG (Kj/m²)"]))/np.std(planilha["QG (Kj/m²)"])
z_scores4=(planilha["T ar (°C)"]-np.mean(planilha["T ar (°C)"]))/np.std(planilha["T ar (°C)"])
z_scores5=(planilha["UR (%)"]-np.mean(planilha["UR (%)"]))/np.std(planilha["UR (%)"])
z_scores6=(planilha["U2 (m/s)"]-np.mean(planilha["U2 (m/s)"]))/np.std(planilha["U2 (m/s)"])

plt.plot(z_scores)
plt.axis(ymin=-4,ymax=4)
plt.title("PREC (mm)")

plt.plot(z_scores2)
plt.axis(ymin=-4,ymax=4)
plt.title("P ATM (mB)")

plt.plot(z_scores3)
plt.axis(ymin=-4,ymax=4)
plt.title("QG (Kj/m²)")

plt.plot(z_scores4)
plt.axis(ymin=-4,ymax=4)
plt.title("P ATM (mB)")

plt.plot(z_scores5)
plt.axis(ymin=-4,ymax=4)
plt.title("UR (%)")

plt.plot(z_scores4)
plt.axis(ymin=-4,ymax=4)
plt.title("T ar (°C)")